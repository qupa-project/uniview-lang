struct Cat {
	id: int;
}

impl Cat {
	fn new(id: int): Cat {
		let out = new Cat {
			id: id;
		};

		return out;
	}

	fn say(this: $Cat) {
		printf("%i: meow\n", this.id);
		return;
	}
}

impl Clone for Cat {
	fn clone(src: @Self): Self {
		let out = new Cat {
			id: src.id + 1;
		};
		printf("%s", "Cloning cat\n");

		return out;
	}
}

impl Drop for Cat {
	fn drop(this: @Self) {
		printf("%s", "Deleting cat...\n");
		return;
	}
}


struct CatCage {
	inside: Cat;
}

fn Consume(o: CatCage){
	return;
}

impl CatCage {
	fn new(cat: Cat): Self {
		let o = new CatCage {
			inside: cat;
		};

		return o;
	}
}


fn main(): int {
	let c = Cat.new(cast#[i64](2));
	Cat.say($c);
	let c2 = Clone(@c);
	Cat.say($c);

	let h = CatCage.new(c);
	return 0;
}