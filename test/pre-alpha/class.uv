struct Cat {
	id: int;
}

impl Cat {
	fn new(id: int): Cat {
		let out = new Cat {
			id: id;
		};

		return out;
	}

	fn say(this: Cat) {
		printf("%i: meow\n", this.id);
	}

	fn say(this: @Cat) {
		printf("%i: meow\n", this.id);
	}
}

impl Clone for Cat {
	fn clone(src: @Cat): Cat {
		let out = new Cat {
			id: src.id + 1;
		};
		printf("%s", "Cloning cat\n");

		return out;
	}
}

impl Drop for Cat {
	fn drop(this: @Cat) {
		printf("%s", "Deleting cat...\n");
	}
}


struct CatCage {
	inside: Cat;
}

fn Consume(o: CatCage){}

impl CatCage {
	fn new(cat: Cat): Self {
		let o = new CatCage {
			inside: cat+2;
		};

		return o;
	}
}


fn main(): int {
	let c = Cat.new(2);
	Cat.say($c);
	Cat.say(@c);

	let h = CatCage.new(c);
	return 0;
}