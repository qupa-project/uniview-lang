// Keep this function before struct definition:
//  - checks out of order declaration is working
//  - checks storing structs within structs
fn check(target: @Person, id: int, age: int, finger: int): int {
	if (target.id != id) {
		return 1;
	}
	if (target.age != age) {
		return 1;
	}
	if (target.finger.id != finger) {
		return 1;
	}

	return 0;
}


struct FingerPrint {
	id: int;
}

struct Person {
	id: int;
	age: int;
	finger: FingerPrint;
}



fn init(ofAge: bool): Person {
	let age = 16;
	if (ofAge) {
		age = 21;
	}

	return new Person {
		id: 0;
		age: age;
		finger: new FingerPrint {
			id: 1;
		};
	};
}

fn age(p: @Person) {
	p.age = p.age + 1;
	return;
}

fn print(p: Person) {
	printf("Person {\n  id: %i,\n  age: %i,\n  finger: ", p.id, p.age);
	print(p.finger);
	printf("%s", "\n}");

	return;
}
fn print(f: FingerPrint) {
	printf("FingerPrint { id: %i }", f.id);
	return;
}



fn main(): int {
	let p = init(false);
	if (check(@p, 0, 16, 1) == 1) {
		printf("%s", "Failed init test\n");
		print(p);
		printf("%s", " != Person {\n  id: 0,\n  age: 16,\n  finger: Finger Print { id: 1 }\n}\n");
		return 1;
	}

	p = init(true);
	if (check(@p, 0, 21, 1) == 1) {
		printf("%s", "Failed init test\n");
		print(p);
		printf("%s", " != Person { id: 0, age: 21, finger: Finger Print { id: 1 } }\n");
		return 1;
	}

	Clone(1);

	let q = Clone#[Person](@p);
	if (check(@q, 0, 21, 1) == 1) {
		printf("%s", "Failed clone test\n");
		print(q);
		printf("%s", " != Person { id: 0, age: 21, finger: Finger Print { id: 1 } }\n");
		return 1;
	}

	age(@p);
	if (check(@p, 0, 22, 1) == 1) {
		printf("%s", "Failed clone independence test\n");
		print(p);
		printf("%s", " != Person { id: 0, age: 22, finger: Finger Print { id: 1 } }\n");
		return 1;
	}
	if (check(@q, 0, 21, 1) == 1) {
		printf("%s", "Failed clone independence test\n");
		print(q);
		printf("%s", " != Person { id: 0, age: 21, finger: Finger Print { id: 1 } }\n");
		return 1;
	}


	p.finger = new FingerPrint {
		id: 12345;
	};

	if (check(@p, 0, 22, 1) != 1) {
		printf("%s", "Failed changing sub structure\n");
		print(p);
		printf("%s", " != Person { id: 0, age: 21, finger: Finger Print { id: 1 } }\n");
		return 1;
	}

	return 0;
}